Basic Explanation:
The control scheme takes in some control scheme in the form of an XML file and interprets a joy message based on this XML file. The interpreted commands are then published.


The control scheme itself is characterized by a class under ControlScheme.py. This class is initialized by reading in any of the xml files designated by an array of file names. These files are all parsed and each turned into a dictionary of the mappings described in the xml file. An array of all of these dictionaries is then made to correspond with the array of xml file names.


When the control scheme receives a joy message the interpretJoyMsg method is called which creates a twist object, matching whatever is the currently selected dictionary of mappings with the received joy message.


This twist message is then published to a ControlOutput node.


If the button that has a target which is designated to be light and that button is pushed, a boolean value will be published to a Toggle node. This boolean value will be the opposite of whatever the last value sent was.




Instructions to use: 


Using the XML template:
The XML file follows this template:
To map a button:
<button target=”foo” name=”bar”/>
Where “foo” is the target control, for instance if you wanted to change the light, the target should be “light”
Where “bar” is the name of the button, the following are recognized names:
* A
* B
* X
* Y
* LB
* RB
* Back
* Start
* LeftStick
* RightStick


If you wanted to toggle the light whenever you hit the A button you would write the following:
<button target=”light” name=”A”/>




To map an axis:
        <axis target=”foo” name=”bar”/>
Where “foo” is the target control, for instance if you wanted to change the linear x value the target would be linear_x.
Foo can be any of the following:
* linear_x
* linear_y
* linear_z
* angular_x
* angular_y
* Angular_z


Where “bar” is the name of the axis.
“Bar” could be:
* LeftStickX
* LeftStickY
* LeftTrigger
* RightStickX
* RightStickY
* RightTrigger
* DpadX
* DpadY


If you wanted to determine the linear x value with the left stick horizontal axis you would write the following:
<axis target=”linear_x” name=”LeftStickX”/>


Running the Control Processor


All of these commands can be found inside of the commands file


If this is the first time that you are running this on a certain machine, you will have to install the xbox driver and the relevant joy nodes.
Install xboxdrv:
sudo apt-get install xboxdrv


Install joy node stuff:
sudo apt-get install ros-indigo-joy ros-indigo-joystick-driver


After all of the drivers are ready, you need to allow the xbox driver to access the controller
sudo rmmod xpad


Then you need to access the actual controller
sudo xboxdrv --silent
**Note which input is being used by the controller. 
The terminal should say something like:

Your Xbox/Xbox260 controller should now be available as:
	/dev/input/js2
	/dev/input/event7
  

In the above case, the important thing to note is the /dev/input/js2 line, specifically the number 2.


The next step is to run the joy node do so by running 
rosparam set joy_node/dev /dev/input/jsX
Where X is whatever number was noted in the previous step


Finally run the joy subscriber, navigate to driverside/src/inputProc, then:
python joy_subscriber.py


The joy subscriber is now running and is publishing a light toggle value and a twist with the information about the linear and angular directions as indicated by the control scheme and user interaction with the controller.


Validating the output
In order to validate what the joy subscriber is publishing, run either light_toggle_subscriber.py or twist_subscriber.py. Both of these will print out whatever data they receive from joy_subscriber.py.


Changing control scheme
The active control scheme can be changed with the setIndex method. setIndex takes in an integer and activates whichever control scheme corresponds with that index.
The actual method of doing this is dependent on the gui which has not been created yet.
